#https://gist.github.com/fumin/7456722
#https://serversforhackers.com/load-balancing-with-haproxy
#https://askubuntu.com/questions/49196/how-do-i-create-a-self-signed-ssl-certificate
#https://stackoverflow.com/questions/27947982/haproxy-unable-to-load-ssl-private-key-from-pem-file
#https://www.digitalocean.com/community/tutorials/how-to-use-haproxy-to-set-up-http-load-balancing-on-an-ubuntu-vps
#https://serverfault.com/questions/239749/possible-to-add-basic-http-access-authentication-via-haproxy
#http://johntdyer.com/haproxy/2015/03/05/dynamic-access-control-allow-origin-header-in-haproxy.html
#https://stackoverflow.com/questions/26556838/how-to-send-a-response-with-haproxy-without-passing-the-request-to-web-servers

userlist elastic_admins
	user ${ELASTIC_USERNAME} insecure-password ${ELASTIC_PASSWORD}

userlist elastic_public
	user ${ELASTIC_USERNAME_OTHER} insecure-password ${ELASTIC_PASSWORD_OTHER}

#eff it, using root user to get access to snakeoil key
global
    log 127.0.0.1 local0 notice
    maxconn 1000
    user root
    group root

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL).
    ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    retries 5
    option redispatch
    timeout connect 20000
    timeout client  20000
    timeout server  20000

frontend elasticsearch_frontend
	log global
	option httplog
	bind :9400 ssl crt ${LOCATION}/server.pem
	mode http


	acl elastic http_auth(elastic_admins)
	acl elastic_all http_auth(elastic_public)

    #deny regular users put and delete ability on elasticsearch
	block if elastic_all !METH_GET !METH_POST !METH_OPTIONS !METH_HEAD

	#request auth if not an options request and not in any of the allows users
	http-request auth if !METH_OPTIONS !elastic !elastic_all

	#if options request, return cors headers
	use_backend cors_headers if METH_OPTIONS

    #finally, forward request if all conditions passed
	use_backend elastic_backend if elastic or elastic_all

backend elastic_backend
	mode http
	server elasticsearch_server 192.168.2.10:9200


frontend kibana_frontend
	log global
	option httplog
	bind :5602 ssl crt ${LOCATION}/server.pem
	mode http

	acl elastic http_auth(elastic_admins)
	http-request auth if !elastic

	use_backend kibana_backend if elastic

backend kibana_backend
	mode http
	server kibana_server 192.168.2.10:5601

backend cors_headers
    errorfile 503 /usr/local/etc/haproxy/cors_file.http